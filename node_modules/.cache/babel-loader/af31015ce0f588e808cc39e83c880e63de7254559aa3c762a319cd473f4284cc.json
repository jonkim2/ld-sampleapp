{"ast":null,"code":"import * as e from \"react\";\nimport t, { createContext as r, Component as n, useState as o, useEffect as s, useContext as a } from \"react\";\nimport { initialize as l } from \"launchdarkly-js-client-sdk\";\nexport * from \"launchdarkly-js-client-sdk\";\nimport i from \"lodash.camelcase\";\nimport c from \"hoist-non-react-statics\";\nconst p = {\n    useCamelCaseFlagKeys: !0,\n    sendEventsOnFlagRead: !0\n  },\n  u = r({\n    flags: {},\n    flagKeyMap: {},\n    ldClient: void 0\n  }),\n  {\n    Provider: f,\n    Consumer: y\n  } = u,\n  d = e => {\n    var t;\n    return null != (t = e.context) ? t : e.user;\n  },\n  g = e => {\n    const t = {};\n    for (const r in e) 0 !== r.indexOf(\"$\") && (t[i(r)] = e[r]);\n    return t;\n  },\n  b = (e, t) => {\n    const r = {};\n    for (const n in e) t && void 0 === t[n] || (r[n] = e[n].current);\n    return r;\n  },\n  h = (e, t) => {\n    const r = e.allFlags();\n    return t ? Object.keys(t).reduce((e, n) => (e[n] = Object.prototype.hasOwnProperty.call(r, n) ? r[n] : t[n], e), {}) : r;\n  };\ng.camelCaseKeys = g;\nvar O = Object.defineProperty,\n  m = Object.getOwnPropertySymbols,\n  v = Object.prototype.hasOwnProperty,\n  j = Object.prototype.propertyIsEnumerable,\n  P = (e, t, r) => t in e ? O(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : e[t] = r,\n  w = (e, t) => {\n    for (var r in t || (t = {})) v.call(t, r) && P(e, r, t[r]);\n    if (m) for (var r of m(t)) j.call(t, r) && P(e, r, t[r]);\n    return e;\n  };\nconst C = {\n    wrapperName: \"react-client-sdk\",\n    wrapperVersion: \"3.0.9\",\n    sendEventsOnlyForVariation: !0\n  },\n  x = (e, ...t) => {\n    return r = void 0, n = [e, ...t], o = function* (e, t = {\n      anonymous: !0,\n      kind: \"user\"\n    }, r, n) {\n      const o = l(e, t, w(w({}, C), r));\n      return new Promise(e => {\n        function t() {\n          o.off(\"ready\", s), o.off(\"failed\", r);\n        }\n        function r(r) {\n          t(), e({\n            flags: {},\n            ldClient: o,\n            error: r\n          });\n        }\n        function s() {\n          t();\n          const r = h(o, n);\n          e({\n            flags: r,\n            ldClient: o\n          });\n        }\n        o.on(\"failed\", r), o.on(\"ready\", s);\n      });\n    }, new Promise((e, t) => {\n      var s = e => {\n          try {\n            l(o.next(e));\n          } catch (e) {\n            t(e);\n          }\n        },\n        a = e => {\n          try {\n            l(o.throw(e));\n          } catch (e) {\n            t(e);\n          }\n        },\n        l = t => t.done ? e(t.value) : Promise.resolve(t.value).then(s, a);\n      l((o = o.apply(r, n)).next());\n    });\n    var r, n, o;\n  };\nfunction F(e, t, r = p, n) {\n  const o = function (e, t) {\n      if (void 0 === t) return e;\n      return Object.keys(t).reduce((t, r) => (E(e, r) && (t[r] = e[r]), t), {});\n    }(t, n),\n    {\n      useCamelCaseFlagKeys: s = !0\n    } = r,\n    [a, l = {}] = s ? function (e) {\n      const t = {},\n        r = {};\n      for (const n in e) {\n        if (0 === n.indexOf(\"$\")) continue;\n        const o = i(n);\n        t[o] = e[n], r[o] = n;\n      }\n      return [t, r];\n    }(o) : [o];\n  return {\n    flags: r.sendEventsOnFlagRead ? K(e, a, l, s) : a,\n    flagKeyMap: l\n  };\n}\nfunction E(e, t) {\n  return Object.prototype.hasOwnProperty.call(e, t);\n}\nfunction K(e, t, r, n) {\n  return new Proxy(t, {\n    get(t, o, s) {\n      const a = Reflect.get(t, o, s),\n        l = n && E(r, o) || E(t, o);\n      if (\"symbol\" == typeof o || !l) return a;\n      if (void 0 === a) return;\n      const i = n ? r[o] : o;\n      return e.variation(i, a);\n    }\n  });\n}\nvar S = Object.defineProperty,\n  k = Object.defineProperties,\n  D = Object.getOwnPropertyDescriptors,\n  I = Object.getOwnPropertySymbols,\n  M = Object.prototype.hasOwnProperty,\n  R = Object.prototype.propertyIsEnumerable,\n  L = (e, t, r) => t in e ? S(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : e[t] = r,\n  z = (e, t) => {\n    for (var r in t || (t = {})) M.call(t, r) && L(e, r, t[r]);\n    if (I) for (var r of I(t)) R.call(t, r) && L(e, r, t[r]);\n    return e;\n  },\n  T = (e, t, r) => (L(e, \"symbol\" != typeof t ? t + \"\" : t, r), r),\n  V = (e, t, r) => new Promise((n, o) => {\n    var s = e => {\n        try {\n          l(r.next(e));\n        } catch (e) {\n          o(e);\n        }\n      },\n      a = e => {\n        try {\n          l(r.throw(e));\n        } catch (e) {\n          o(e);\n        }\n      },\n      l = e => e.done ? n(e.value) : Promise.resolve(e.value).then(s, a);\n    l((r = r.apply(e, t)).next());\n  });\nclass $ extends n {\n  constructor(e) {\n    super(e), T(this, \"state\"), T(this, \"getReactOptions\", () => z(z({}, p), this.props.reactOptions)), T(this, \"subscribeToChanges\", e => {\n      const {\n        flags: t\n      } = this.props;\n      e.on(\"change\", r => {\n        const n = this.getReactOptions(),\n          o = b(r, t),\n          s = z(z({}, this.state.unproxiedFlags), o);\n        Object.keys(o).length > 0 && this.setState(z({\n          unproxiedFlags: s\n        }, F(e, s, n, t)));\n      });\n    }), T(this, \"initLDClient\", () => V(this, null, function* () {\n      const {\n        clientSideID: e,\n        flags: t,\n        options: r\n      } = this.props;\n      let n = yield this.props.ldClient;\n      const o = this.getReactOptions();\n      let s,\n        a = this.state.unproxiedFlags;\n      if (n) a = h(n, t);else {\n        const o = yield x(e, d(this.props), r, t);\n        s = o.error, s || (a = o.flags), n = o.ldClient;\n      }\n      var l;\n      this.setState((l = z({\n        unproxiedFlags: a\n      }, F(n, a, o, t)), k(l, D({\n        ldClient: n,\n        error: s\n      })))), this.subscribeToChanges(n);\n    }));\n    const {\n      options: t\n    } = e;\n    if (this.state = {\n      flags: {},\n      unproxiedFlags: {},\n      flagKeyMap: {},\n      ldClient: void 0\n    }, t) {\n      const {\n        bootstrap: e\n      } = t;\n      if (e && \"localStorage\" !== e) {\n        const {\n          useCamelCaseFlagKeys: t\n        } = this.getReactOptions();\n        this.state = {\n          flags: t ? g(e) : e,\n          unproxiedFlags: e,\n          flagKeyMap: {},\n          ldClient: void 0\n        };\n      }\n    }\n  }\n  componentDidMount() {\n    return V(this, null, function* () {\n      const {\n        deferInitialization: e\n      } = this.props;\n      e && !d(this.props) || (yield this.initLDClient());\n    });\n  }\n  componentDidUpdate(e) {\n    return V(this, null, function* () {\n      const {\n          deferInitialization: t\n        } = this.props,\n        r = !d(e) && d(this.props);\n      t && r && (yield this.initLDClient());\n    });\n  }\n  render() {\n    const {\n      flags: e,\n      flagKeyMap: r,\n      ldClient: n,\n      error: o\n    } = this.state;\n    return t.createElement(f, {\n      value: {\n        flags: e,\n        flagKeyMap: r,\n        ldClient: n,\n        error: o\n      }\n    }, this.props.children);\n  }\n}\nvar N = Object.defineProperty,\n  U = Object.defineProperties,\n  q = Object.getOwnPropertyDescriptors,\n  A = Object.getOwnPropertySymbols,\n  B = Object.prototype.hasOwnProperty,\n  G = Object.prototype.propertyIsEnumerable,\n  H = (e, t, r) => t in e ? N(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : e[t] = r,\n  J = (e, t) => {\n    for (var r in t || (t = {})) B.call(t, r) && H(e, r, t[r]);\n    if (A) for (var r of A(t)) G.call(t, r) && H(e, r, t[r]);\n    return e;\n  };\nfunction Q(t) {\n  return function (r) {\n    const {\n        reactOptions: n\n      } = t,\n      o = J(J({}, p), n),\n      s = (a = J({}, t), U(a, q({\n        reactOptions: o\n      })));\n    var a;\n    function l(t) {\n      return e.createElement($, J({}, s), e.createElement(r, J({}, t)));\n    }\n    return c(l, r), l;\n  };\n}\nvar W = Object.defineProperty,\n  X = Object.getOwnPropertySymbols,\n  Y = Object.prototype.hasOwnProperty,\n  Z = Object.prototype.propertyIsEnumerable,\n  _ = (e, t, r) => t in e ? W(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : e[t] = r,\n  ee = (e, t) => {\n    for (var r in t || (t = {})) Y.call(t, r) && _(e, r, t[r]);\n    if (X) for (var r of X(t)) Z.call(t, r) && _(e, r, t[r]);\n    return e;\n  };\nfunction te(e) {\n  return r = this, n = null, a = function* () {\n    const {\n        clientSideID: r,\n        flags: n,\n        options: a,\n        reactOptions: l\n      } = e,\n      i = ee(ee({}, p), l),\n      {\n        ldClient: c,\n        flags: u,\n        error: y\n      } = yield x(r, d(e), a, n),\n      g = (null == a ? void 0 : a.bootstrap) && \"localStorage\" !== a.bootstrap ? a.bootstrap : u;\n    return ({\n      children: e\n    }) => {\n      const [r, a] = o(() => ee({\n        unproxiedFlags: g\n      }, F(c, g, i, n)));\n      s(() => {\n        function e(e) {\n          const t = b(e, n);\n          Object.keys(t).length > 0 && a(({\n            unproxiedFlags: e\n          }) => {\n            const r = ee(ee({}, e), t);\n            return ee({\n              unproxiedFlags: r\n            }, F(c, r, i, n));\n          });\n        }\n        return c.on(\"change\", e), function () {\n          c.off(\"change\", e);\n        };\n      }, []);\n      const {\n        flags: l,\n        flagKeyMap: p\n      } = r;\n      return t.createElement(f, {\n        value: {\n          flags: l,\n          flagKeyMap: p,\n          ldClient: c,\n          error: y\n        }\n      }, e);\n    };\n  }, new Promise((e, t) => {\n    var o = e => {\n        try {\n          l(a.next(e));\n        } catch (e) {\n          t(e);\n        }\n      },\n      s = e => {\n        try {\n          l(a.throw(e));\n        } catch (e) {\n          t(e);\n        }\n      },\n      l = t => t.done ? e(t.value) : Promise.resolve(t.value).then(o, s);\n    l((a = a.apply(r, n)).next());\n  });\n  var r, n, a;\n}\nvar re = Object.defineProperty,\n  ne = Object.getOwnPropertySymbols,\n  oe = Object.prototype.hasOwnProperty,\n  se = Object.prototype.propertyIsEnumerable,\n  ae = (e, t, r) => t in e ? re(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : e[t] = r,\n  le = (e, t) => {\n    for (var r in t || (t = {})) oe.call(t, r) && ae(e, r, t[r]);\n    if (ne) for (var r of ne(t)) se.call(t, r) && ae(e, r, t[r]);\n    return e;\n  };\nfunction ie(t = {\n  clientOnly: !1\n}) {\n  return function (r) {\n    return n => e.createElement(y, null, ({\n      flags: o,\n      ldClient: s\n    }) => t.clientOnly ? e.createElement(r, le({\n      ldClient: s\n    }, n)) : e.createElement(r, le({\n      flags: o,\n      ldClient: s\n    }, n)));\n  };\n}\nconst ce = () => {\n    const {\n      flags: e\n    } = a(u);\n    return e;\n  },\n  pe = () => {\n    const {\n      ldClient: e\n    } = a(u);\n    return e;\n  };\nfunction ue() {\n  const {\n    error: e\n  } = a(u);\n  return e;\n}\nexport { $ as LDProvider, te as asyncWithLDProvider, g as camelCaseKeys, p as defaultReactOptions, ce as useFlags, pe as useLDClient, ue as useLDClientError, ie as withLDConsumer, Q as withLDProvider };","map":{"version":3,"names":["p","useCamelCaseFlagKeys","sendEventsOnFlagRead","u","r","flags","flagKeyMap","ldClient","Provider","f","Consumer","y","d","e","t","context","user","g","indexOf","i","b","getFlattenedFlagsFromChangeset","n","current","h","fetchFlags","allFlags","Object","keys","reduce","prototype","hasOwnProperty","call","camelCaseKeys","O","defineProperty","m","getOwnPropertySymbols","v","j","propertyIsEnumerable","P","enumerable","configurable","writable","value","w","C","wrapperName","wrapperVersion","sendEventsOnlyForVariation","x","initLDClient","o","_1","anonymous","kind","l","Promise","off","s","error","on","next","a","throw","done","resolve","then","apply","F","E","K","Proxy","get","Reflect","variation","S","k","defineProperties","D","getOwnPropertyDescriptors","I","M","R","L","z","T","V","$","constructor","props","reactOptions","getReactOptions","state","unproxiedFlags","length","setState","clientSideID","options","subscribeToChanges","bootstrap","componentDidMount","deferInitialization","componentDidUpdate","render","createElement","children","N","U","q","A","B","G","H","J","Q","c","W","X","Y","Z","_","ee","te","re","ne","oe","se","ae","le","ie","clientOnly","ce","useFlags","pe","useLDClient","ue","LDProvider","asyncWithLDProvider","defaultReactOptions","useLDClientError","withLDConsumer","withLDProvider"],"sources":["/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/types.ts","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/context.ts","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/utils.ts","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/initLDClient.ts","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/getFlagsProxy.ts","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/provider.tsx","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/withLDProvider.tsx","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/asyncWithLDProvider.tsx","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/withLDConsumer.tsx","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/useFlags.ts","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/useLDClient.ts","/Users/poopymcfartface/hello-react/node_modules/launchdarkly-react-client-sdk/src/useLDClientError.tsx"],"sourcesContent":["import { LDClient, LDContext, LDFlagSet, LDOptions } from 'launchdarkly-js-client-sdk';\nimport * as React from 'react';\n\n/**\n * Initialization options for the LaunchDarkly React SDK. These are in addition to the options exposed\n * by [[LDOptions]] which are common to both the JavaScript and React SDKs.\n */\nexport interface LDReactOptions {\n  /**\n   * Whether the React SDK should transform flag keys into camel-cased format.\n   * Using camel-cased flag keys allow for easier use as prop values, however,\n   * these keys won't directly match the flag keys as known to LaunchDarkly.\n   * Consequently, flag key collisions may be possible and the Code References feature\n   * will not function properly.\n   *\n   * This is true by default, meaning that keys will automatically be converted to camel-case.\n   *\n   * For more information, see the React SDK Reference Guide on\n   * [flag keys](https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys).\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys\n   */\n  useCamelCaseFlagKeys?: boolean;\n\n  /**\n   * Whether to send flag evaluation events when a flag is read from the `flags` object\n   * returned by the `useFlags` hook. This is true by default, meaning flag evaluation\n   * events will be sent by default.\n   */\n  sendEventsOnFlagRead?: boolean;\n}\n\n/**\n * Contains default values for the `reactOptions` object.\n */\nexport const defaultReactOptions = { useCamelCaseFlagKeys: true, sendEventsOnFlagRead: true };\n\n/**\n * Configuration object used to initialise LaunchDarkly's JS client.\n */\nexport interface ProviderConfig {\n  /**\n   * Your project and environment specific client side ID. You can find\n   * this in your LaunchDarkly portal under Account settings. This is\n   * the only mandatory property required to use the React SDK.\n   */\n  clientSideID: string;\n\n  /**\n   * A LaunchDarkly context object. If unspecified, an anonymous context\n   * with kind: 'user' will be created and used.\n   */\n  context?: LDContext;\n\n  /**\n   * @deprecated The `user` property will be removed in a future version,\n   * please update your code to use context instead.\n   */\n  user?: LDContext;\n\n  /**\n   * If set to true, the ldClient will not be initialized until the context prop has been defined.\n   */\n  deferInitialization?: boolean;\n\n  /**\n   * LaunchDarkly initialization options. These options are common between LaunchDarkly's JavaScript and React SDKs.\n   *\n   * @see https://docs.launchdarkly.com/sdk/features/config#javascript\n   */\n  options?: LDOptions;\n\n  /**\n   * Additional initialization options specific to the React SDK.\n   *\n   * @see options\n   */\n  reactOptions?: LDReactOptions;\n\n  /**\n   * If specified, `launchdarkly-react-client-sdk` will only listen for changes to these flags.\n   * Otherwise, all flags will be requested and listened to.\n   * Flag keys must be in their original form as known to LaunchDarkly rather than in their camel-cased form.\n   */\n  flags?: LDFlagSet;\n\n  /**\n   * Optionally, the ldClient can be initialised outside of the provider\n   * and passed in, instead of being initialised by the provider.\n   * Note: it should only be passed in when it has emitted the 'ready'\n   * event, to ensure that the flags are properly set.\n   */\n  ldClient?: LDClient | Promise<LDClient | undefined>;\n}\n\n/**\n * Configuration object used to initialize LaunchDarkly's JS client asynchronously.\n */\nexport type AsyncProviderConfig = Omit<ProviderConfig, 'deferInitialization'> & {\n  /**\n   * @deprecated - `asyncWithLDProvider` does not support the `deferInitialization` config option because\n   * `asyncWithLDProvider` needs to be initialized at the app entry point prior to render to ensure flags and the\n   * ldClient are ready at the beginning of the app.\n   */\n  deferInitialization?: boolean;\n};\n\n/**\n * The return type of withLDProvider HOC. Exported for testing purposes only.\n *\n * @ignore\n */\nexport interface EnhancedComponent extends React.Component {\n  subscribeToChanges(ldClient: LDClient): void;\n  // tslint:disable-next-line:invalid-void\n  componentDidMount(): Promise<void>;\n  // tslint:disable-next-line:invalid-void\n  componentDidUpdate(prevProps: ProviderConfig): Promise<void>;\n}\n\n/**\n * Return type of `initLDClient`.\n */\nexport interface AllFlagsLDClient {\n  /**\n   * Contains all flags from LaunchDarkly.\n   */\n  flags: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`).\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient: LDClient;\n\n  /**\n   * LaunchDarkly client initialization error, if there was one.\n   */\n  error?: Error;\n}\n\n/**\n * Map of camelized flag keys to original unmodified flag keys.\n */\nexport interface LDFlagKeyMap {\n  [camelCasedKey: string]: string;\n}\n\nexport * from 'launchdarkly-js-client-sdk';\n","import { createContext } from 'react';\nimport { LDClient, LDFlagSet } from 'launchdarkly-js-client-sdk';\nimport { LDFlagKeyMap } from './types';\n\n/**\n * The sdk context stored in the Provider state and passed to consumers.\n */\ninterface ReactSdkContext {\n  /**\n   * JavaScript proxy that will trigger a LDClient#variation call on flag read in order\n   * to register a flag evaluation event in LaunchDarkly. Empty {} initially\n   * until flags are fetched from the LaunchDarkly servers.\n   */\n  flags: LDFlagSet;\n\n  /**\n   * Map of camelized flag keys to their original unmodified form. Empty if useCamelCaseFlagKeys option is false.\n   */\n  flagKeyMap: LDFlagKeyMap;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`).\n   * This will be be undefined initially until initialization is complete.\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient?: LDClient;\n\n  /**\n   * LaunchDarkly client initialization error, if there was one.\n   */\n  error?: Error;\n}\n\n/**\n * @ignore\n */\nconst context = createContext<ReactSdkContext>({ flags: {}, flagKeyMap: {}, ldClient: undefined });\nconst {\n  /**\n   * @ignore\n   */\n  Provider,\n  /**\n   * @ignore\n   */\n  Consumer,\n} = context;\n\nexport { Provider, Consumer, ReactSdkContext };\nexport default context;\n","import { LDClient, LDContext, LDFlagChangeset, LDFlagSet } from 'launchdarkly-js-client-sdk';\nimport camelCase from 'lodash.camelcase';\nimport { ProviderConfig } from './types';\n\n/**\n * Helper function to get the context or fallback to classic user.\n * Safe to remove when the user property is deprecated.\n */\nexport const getContextOrUser = (config: ProviderConfig): LDContext | undefined => config.context ?? config.user;\n\n/**\n * Transforms a set of flags so that their keys are camelCased. This function ignores\n * flag keys which start with `$`.\n *\n * @param rawFlags A mapping of flag keys and their values\n * @return A transformed `LDFlagSet` with camelCased flag keys\n */\nexport const camelCaseKeys = (rawFlags: LDFlagSet) => {\n  const flags: LDFlagSet = {};\n  for (const rawFlag in rawFlags) {\n    // Exclude system keys\n    if (rawFlag.indexOf('$') !== 0) {\n      flags[camelCase(rawFlag)] = rawFlags[rawFlag]; // tslint:disable-line:no-unsafe-any\n    }\n  }\n\n  return flags;\n};\n\n/**\n * Gets the flags to pass to the provider from the changeset.\n *\n * @param changes the `LDFlagChangeset` from the ldClient onchange handler.\n * @param targetFlags if targetFlags are specified, changes to other flags are ignored and not returned in the\n * flattened `LDFlagSet`\n * @return an `LDFlagSet` with the current flag values from the LDFlagChangeset filtered by `targetFlags`. The returned\n * object may be empty `{}` if none of the targetFlags were changed.\n */\nexport const getFlattenedFlagsFromChangeset = (\n  changes: LDFlagChangeset,\n  targetFlags: LDFlagSet | undefined,\n): LDFlagSet => {\n  const flattened: LDFlagSet = {};\n  for (const key in changes) {\n    if (!targetFlags || targetFlags[key] !== undefined) {\n      flattened[key] = changes[key].current;\n    }\n  }\n\n  return flattened;\n};\n\n/**\n * Retrieves flag values.\n *\n * @param ldClient LaunchDarkly client\n * @param targetFlags If specified, `launchdarkly-react-client-sdk` will only listen for changes to these flags.\n * Flag keys must be in their original form as known to LaunchDarkly rather than in their camel-cased form.\n *\n * @returns an `LDFlagSet` with the current flag values from LaunchDarkly filtered by `targetFlags`.\n */\nexport const fetchFlags = (ldClient: LDClient, targetFlags?: LDFlagSet) => {\n  const allFlags = ldClient.allFlags();\n  if (!targetFlags) {\n    return allFlags;\n  }\n\n  return Object.keys(targetFlags).reduce<LDFlagSet>((acc, key) => {\n    acc[key] = Object.prototype.hasOwnProperty.call(allFlags, key) ? allFlags[key] : targetFlags[key];\n\n    return acc;\n  }, {});\n};\n\n/**\n * @deprecated The `camelCaseKeys.camelCaseKeys` property will be removed in a future version,\n * please update your code to use the `camelCaseKeys` function directly.\n */\n// tslint:disable-next-line deprecation\ncamelCaseKeys.camelCaseKeys = camelCaseKeys;\n\nexport default { camelCaseKeys, getFlattenedFlagsFromChangeset, fetchFlags };\n","import { initialize as ldClientInitialize, LDContext, LDFlagSet, LDOptions } from 'launchdarkly-js-client-sdk';\nimport { AllFlagsLDClient } from './types';\nimport { fetchFlags } from './utils';\nimport * as packageInfo from '../package.json';\n\nconst wrapperOptions: LDOptions = {\n  wrapperName: 'react-client-sdk',\n  wrapperVersion: packageInfo.version,\n  sendEventsOnlyForVariation: true,\n};\n\n/**\n * Internal function to initialize the `LDClient`.\n *\n * @param clientSideID Your project and environment specific client side ID\n * @param context A LaunchDarkly context object\n * @param options LaunchDarkly initialization options\n * @param targetFlags If specified, `launchdarkly-react-client-sdk` will only listen for changes to these flags.\n * Flag keys must be in their original form as known to LaunchDarkly rather than in their camel-cased form.\n *\n * @see `ProviderConfig` for more details about the parameters\n * @return An initialized client and flags\n */\nconst initLDClient = async (\n  clientSideID: string,\n  context: LDContext = { anonymous: true, kind: 'user' },\n  options?: LDOptions,\n  targetFlags?: LDFlagSet,\n): Promise<AllFlagsLDClient> => {\n  const ldClient = ldClientInitialize(clientSideID, context, { ...wrapperOptions, ...options });\n\n  return new Promise<AllFlagsLDClient>((resolve) => {\n    function cleanup() {\n      ldClient.off('ready', handleReady);\n      ldClient.off('failed', handleFailure);\n    }\n    function handleFailure(error: Error) {\n      cleanup();\n      resolve({ flags: {}, ldClient, error });\n    }\n    function handleReady() {\n      cleanup();\n      const flags = fetchFlags(ldClient, targetFlags);\n      resolve({ flags, ldClient });\n    }\n    ldClient.on('failed', handleFailure);\n    ldClient.on('ready', handleReady);\n  });\n};\n\nexport default initLDClient;\n","import { LDFlagSet, LDClient } from 'launchdarkly-js-client-sdk';\nimport camelCase from 'lodash.camelcase';\nimport { defaultReactOptions, LDFlagKeyMap, LDReactOptions } from './types';\n\nexport default function getFlagsProxy(\n  ldClient: LDClient,\n  rawFlags: LDFlagSet,\n  reactOptions: LDReactOptions = defaultReactOptions,\n  targetFlags?: LDFlagSet,\n): { flags: LDFlagSet; flagKeyMap: LDFlagKeyMap } {\n  const filteredFlags = filterFlags(rawFlags, targetFlags);\n  const { useCamelCaseFlagKeys = true } = reactOptions;\n  const [flags, flagKeyMap = {}] = useCamelCaseFlagKeys ? getCamelizedKeysAndFlagMap(filteredFlags) : [filteredFlags];\n\n  return {\n    flags: reactOptions.sendEventsOnFlagRead ? toFlagsProxy(ldClient, flags, flagKeyMap, useCamelCaseFlagKeys) : flags,\n    flagKeyMap,\n  };\n}\n\nfunction filterFlags(flags: LDFlagSet, targetFlags?: LDFlagSet): LDFlagSet {\n  if (targetFlags === undefined) {\n    return flags;\n  }\n\n  return Object.keys(targetFlags).reduce<LDFlagSet>((acc, key) => {\n    if (hasFlag(flags, key)) {\n      acc[key] = flags[key];\n    }\n\n    return acc;\n  }, {});\n}\n\nfunction getCamelizedKeysAndFlagMap(rawFlags: LDFlagSet) {\n  const flags: LDFlagSet = {};\n  const flagKeyMap: LDFlagKeyMap = {};\n  for (const rawFlag in rawFlags) {\n    // Exclude system keys\n    if (rawFlag.indexOf('$') === 0) {\n      continue;\n    }\n    const camelKey = camelCase(rawFlag);\n    flags[camelKey] = rawFlags[rawFlag];\n    flagKeyMap[camelKey] = rawFlag;\n  }\n\n  return [flags, flagKeyMap];\n}\n\nfunction hasFlag(flags: LDFlagSet, flagKey: string) {\n  return Object.prototype.hasOwnProperty.call(flags, flagKey);\n}\n\nfunction toFlagsProxy(\n  ldClient: LDClient,\n  flags: LDFlagSet,\n  flagKeyMap: LDFlagKeyMap,\n  useCamelCaseFlagKeys: boolean,\n): LDFlagSet {\n  return new Proxy(flags, {\n    // trap for reading a flag value using `LDClient#variation` to trigger an evaluation event\n    get(target, prop, receiver) {\n      const currentValue = Reflect.get(target, prop, receiver);\n\n      // check if flag key exists as camelCase or original case\n      const validFlagKey =\n        (useCamelCaseFlagKeys && hasFlag(flagKeyMap, prop as string)) || hasFlag(target, prop as string);\n\n      // only process flag keys and ignore symbols and native Object functions\n      if (typeof prop === 'symbol' || !validFlagKey) {\n        return currentValue;\n      }\n\n      if (currentValue === undefined) {\n        return;\n      }\n\n      const pristineFlagKey = useCamelCaseFlagKeys ? flagKeyMap[prop] : prop;\n\n      return ldClient.variation(pristineFlagKey, currentValue);\n    },\n  });\n}\n","import React, { Component, PropsWithChildren } from 'react';\nimport { LDClient, LDFlagChangeset, LDFlagSet } from 'launchdarkly-js-client-sdk';\nimport { EnhancedComponent, ProviderConfig, defaultReactOptions } from './types';\nimport { Provider, ReactSdkContext } from './context';\nimport initLDClient from './initLDClient';\nimport { camelCaseKeys, fetchFlags, getContextOrUser, getFlattenedFlagsFromChangeset } from './utils';\nimport getFlagsProxy from './getFlagsProxy';\n\ninterface LDHocState extends ReactSdkContext {\n  unproxiedFlags: LDFlagSet;\n}\n\n/**\n * The `LDProvider` is a component which accepts a config object which is used to\n * initialize `launchdarkly-js-client-sdk`.\n *\n * This Provider does three things:\n * - It initializes the ldClient instance by calling `launchdarkly-js-client-sdk` initialize on `componentDidMount`\n * - It saves all flags and the ldClient instance in the context API\n * - It subscribes to flag changes and propagate them through the context API\n *\n * Because the `launchdarkly-js-client-sdk` in only initialized on `componentDidMount`, your flags and the\n * ldClient are only available after your app has mounted. This can result in a flicker due to flag changes at\n * startup time.\n *\n * This component can be used as a standalone provider. However, be mindful to only include the component once\n * within your application. This provider is used inside the `withLDProviderHOC` and can be used instead to initialize\n * the `launchdarkly-js-client-sdk`. For async initialization, check out the `asyncWithLDProvider` function\n */\nclass LDProvider extends Component<PropsWithChildren<ProviderConfig>, LDHocState> implements EnhancedComponent {\n  readonly state: Readonly<LDHocState>;\n\n  constructor(props: ProviderConfig) {\n    super(props);\n\n    const { options } = props;\n\n    this.state = {\n      flags: {},\n      unproxiedFlags: {},\n      flagKeyMap: {},\n      ldClient: undefined,\n    };\n\n    if (options) {\n      const { bootstrap } = options;\n      if (bootstrap && bootstrap !== 'localStorage') {\n        const { useCamelCaseFlagKeys } = this.getReactOptions();\n        this.state = {\n          flags: useCamelCaseFlagKeys ? camelCaseKeys(bootstrap) : bootstrap,\n          unproxiedFlags: bootstrap,\n          flagKeyMap: {},\n          ldClient: undefined,\n        };\n      }\n    }\n  }\n\n  getReactOptions = () => ({ ...defaultReactOptions, ...this.props.reactOptions });\n\n  subscribeToChanges = (ldClient: LDClient) => {\n    const { flags: targetFlags } = this.props;\n    ldClient.on('change', (changes: LDFlagChangeset) => {\n      const reactOptions = this.getReactOptions();\n      const updates = getFlattenedFlagsFromChangeset(changes, targetFlags);\n      const unproxiedFlags = {\n        ...this.state.unproxiedFlags,\n        ...updates,\n      };\n      if (Object.keys(updates).length > 0) {\n        this.setState({ unproxiedFlags, ...getFlagsProxy(ldClient, unproxiedFlags, reactOptions, targetFlags) });\n      }\n    });\n  };\n\n  initLDClient = async () => {\n    const { clientSideID, flags, options } = this.props;\n    let ldClient = await this.props.ldClient;\n    const reactOptions = this.getReactOptions();\n    let unproxiedFlags = this.state.unproxiedFlags;\n    let error: Error | undefined;\n    if (ldClient) {\n      unproxiedFlags = fetchFlags(ldClient, flags);\n    } else {\n      const initialisedOutput = await initLDClient(clientSideID, getContextOrUser(this.props), options, flags);\n      error = initialisedOutput.error;\n      if (!error) {\n        unproxiedFlags = initialisedOutput.flags;\n      }\n      ldClient = initialisedOutput.ldClient;\n    }\n    this.setState({ unproxiedFlags, ...getFlagsProxy(ldClient, unproxiedFlags, reactOptions, flags), ldClient, error });\n    this.subscribeToChanges(ldClient);\n  };\n\n  async componentDidMount() {\n    const { deferInitialization } = this.props;\n    if (deferInitialization && !getContextOrUser(this.props)) {\n      return;\n    }\n\n    await this.initLDClient();\n  }\n\n  async componentDidUpdate(prevProps: ProviderConfig) {\n    const { deferInitialization } = this.props;\n    const contextJustLoaded = !getContextOrUser(prevProps) && getContextOrUser(this.props);\n    if (deferInitialization && contextJustLoaded) {\n      await this.initLDClient();\n    }\n  }\n\n  render() {\n    const { flags, flagKeyMap, ldClient, error } = this.state;\n\n    return <Provider value={{ flags, flagKeyMap, ldClient, error }}>{this.props.children}</Provider>;\n  }\n}\n\nexport default LDProvider;\n","import * as React from 'react';\nimport { defaultReactOptions, ProviderConfig } from './types';\nimport LDProvider from './provider';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\n/**\n * `withLDProvider` is a function which accepts a config object which is used to\n * initialize `launchdarkly-js-client-sdk`.\n *\n * This HOC handles passing configuration to the `LDProvider`, which does the following:\n * - It initializes the ldClient instance by calling `launchdarkly-js-client-sdk` initialize on `componentDidMount`\n * - It saves all flags and the ldClient instance in the context API\n * - It subscribes to flag changes and propagate them through the context API\n *\n * The difference between `withLDProvider` and `asyncWithLDProvider` is that `withLDProvider` initializes\n * `launchdarkly-js-client-sdk` at `componentDidMount`. This means your flags and the ldClient are only available after\n * your app has mounted. This can result in a flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` initializes `launchdarkly-js-client-sdk` at the entry point of your app prior to render.\n * This means that your flags and the ldClient are ready at the beginning of your app. This ensures your app does not\n * flicker due to flag changes at startup time.\n *\n * @param config - The configuration used to initialize LaunchDarkly's JS SDK\n * @return A function which accepts your root React component and returns a HOC\n */\nexport function withLDProvider<T extends JSX.IntrinsicAttributes = {}>(\n  config: ProviderConfig,\n): (WrappedComponent: React.ComponentType<T>) => React.ComponentType<T> {\n  return function withLDProviderHoc(WrappedComponent: React.ComponentType<T>): React.ComponentType<T> {\n    const { reactOptions: userReactOptions } = config;\n    const reactOptions = { ...defaultReactOptions, ...userReactOptions };\n    const providerProps = { ...config, reactOptions };\n\n    function HoistedComponent(props: T) {\n      return (\n        <LDProvider {...providerProps}>\n          <WrappedComponent {...props} />\n        </LDProvider>\n      );\n    }\n\n    hoistNonReactStatics(HoistedComponent, WrappedComponent);\n\n    return HoistedComponent;\n  };\n}\n\nexport default withLDProvider;\n","import React, { useState, useEffect, ReactNode } from 'react';\nimport { LDFlagChangeset } from 'launchdarkly-js-client-sdk';\nimport { AsyncProviderConfig, defaultReactOptions } from './types';\nimport { Provider } from './context';\nimport initLDClient from './initLDClient';\nimport { getContextOrUser, getFlattenedFlagsFromChangeset } from './utils';\nimport getFlagsProxy from './getFlagsProxy';\n\n/**\n * This is an async function which initializes LaunchDarkly's JS SDK (`launchdarkly-js-client-sdk`)\n * and awaits it so all flags and the ldClient are ready before the consumer app is rendered.\n *\n * The difference between `withLDProvider` and `asyncWithLDProvider` is that `withLDProvider` initializes\n * `launchdarkly-js-client-sdk` at componentDidMount. This means your flags and the ldClient are only available after\n * your app has mounted. This can result in a flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` initializes `launchdarkly-js-client-sdk` at the entry point of your app prior to render.\n * This means that your flags and the ldClient are ready at the beginning of your app. This ensures your app does not\n * flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` accepts a config object which is used to initialize `launchdarkly-js-client-sdk`.\n *\n * `asyncWithLDProvider` does not support the `deferInitialization` config option because `asyncWithLDProvider` needs\n * to be initialized at the entry point prior to render to ensure your flags and the ldClient are ready at the beginning\n * of your app.\n *\n * It returns a provider which is a React FunctionComponent which:\n * - saves all flags and the ldClient instance in the context API\n * - subscribes to flag changes and propagate them through the context API\n *\n * @param config - The configuration used to initialize LaunchDarkly's JS SDK\n */\nexport default async function asyncWithLDProvider(config: AsyncProviderConfig) {\n  const { clientSideID, flags: targetFlags, options, reactOptions: userReactOptions } = config;\n  const reactOptions = { ...defaultReactOptions, ...userReactOptions };\n  const { ldClient, flags: fetchedFlags, error } = await initLDClient(\n    clientSideID,\n    getContextOrUser(config),\n    options,\n    targetFlags,\n  );\n\n  const initialFlags = options?.bootstrap && options.bootstrap !== 'localStorage' ? options.bootstrap : fetchedFlags;\n\n  const LDProvider = ({ children }: { children: ReactNode }) => {\n    const [ldData, setLDData] = useState(() => ({\n      unproxiedFlags: initialFlags,\n      ...getFlagsProxy(ldClient, initialFlags, reactOptions, targetFlags),\n    }));\n\n    useEffect(() => {\n      function onChange(changes: LDFlagChangeset) {\n        const updates = getFlattenedFlagsFromChangeset(changes, targetFlags);\n        if (Object.keys(updates).length > 0) {\n          setLDData(({ unproxiedFlags }) => {\n            const updatedUnproxiedFlags = { ...unproxiedFlags, ...updates };\n\n            return {\n              unproxiedFlags: updatedUnproxiedFlags,\n              ...getFlagsProxy(ldClient, updatedUnproxiedFlags, reactOptions, targetFlags),\n            };\n          });\n        }\n      }\n      ldClient.on('change', onChange);\n\n      return function cleanup() {\n        ldClient.off('change', onChange);\n      };\n    }, []);\n\n    const { flags, flagKeyMap } = ldData;\n\n    return <Provider value={{ flags, flagKeyMap, ldClient, error }}>{children}</Provider>;\n  };\n\n  return LDProvider;\n}\n","import * as React from 'react';\nimport { Consumer, ReactSdkContext } from './context';\nimport { LDClient, LDFlagSet } from 'launchdarkly-js-client-sdk';\n\n/**\n * Controls the props the wrapped component receives from the `LDConsumer` HOC.\n */\nexport interface ConsumerOptions {\n  /**\n   * If true then the wrapped component only receives the `ldClient` instance\n   * and nothing else.\n   */\n  clientOnly: boolean;\n}\n\n/**\n * The possible props the wrapped component can receive from the `LDConsumer` HOC.\n */\nexport interface LDProps {\n  /**\n   * A map of feature flags from their keys to their values.\n   * Keys are camelCased using `lodash.camelcase`.\n   */\n  flags?: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`)\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient?: LDClient;\n}\n\n/**\n * withLDConsumer is a function which accepts an optional options object and returns a function\n * which accepts your React component. This function returns a HOC with flags\n * and the ldClient instance injected via props.\n *\n * @param options - If you need only the `ldClient` instance and not flags, then set `{ clientOnly: true }`\n * to only pass the ldClient prop to your component. Defaults to `{ clientOnly: false }`.\n * @return A HOC with flags and the `ldClient` instance injected via props\n */\nfunction withLDConsumer(options: ConsumerOptions = { clientOnly: false }) {\n  return function withLDConsumerHoc<P>(WrappedComponent: React.ComponentType<P & LDProps>) {\n    return (props: P) => (\n      <Consumer>\n        {({ flags, ldClient }: ReactSdkContext) => {\n          if (options.clientOnly) {\n            return <WrappedComponent ldClient={ldClient} {...props} />;\n          }\n\n          return <WrappedComponent flags={flags} ldClient={ldClient} {...props} />;\n        }}\n      </Consumer>\n    );\n  };\n}\n\nexport default withLDConsumer;\n","import { LDFlagSet } from 'launchdarkly-js-client-sdk';\nimport { useContext } from 'react';\nimport context, { ReactSdkContext } from './context';\n\n/**\n * `useFlags` is a custom hook which returns all feature flags. It uses the `useContext` primitive\n * to access the LaunchDarkly context set up by `withLDProvider`. As such you will still need to\n * use the `withLDProvider` HOC at the root of your app to initialize the React SDK and populate the\n * context with `ldClient` and your flags.\n *\n * @return All the feature flags configured in your LaunchDarkly project\n */\nconst useFlags = <T extends LDFlagSet = LDFlagSet>(): T => {\n  const { flags } = useContext<ReactSdkContext>(context);\n\n  return flags as T;\n};\n\nexport default useFlags;\n","import { useContext } from 'react';\nimport context from './context';\n\n// tslint:disable:max-line-length\n/**\n * `useLDClient` is a custom hook which returns the underlying [LaunchDarkly JavaScript SDK client object](https://launchdarkly.github.io/js-client-sdk/interfaces/LDClient.html).\n * Like the `useFlags` custom hook, `useLDClient` also uses the `useContext` primitive to access the LaunchDarkly\n * context set up by `withLDProvider`. You will still need to use the `withLDProvider` HOC\n * to initialise the react sdk to use this custom hook.\n *\n * @return The `launchdarkly-js-client-sdk` `LDClient` object\n */\n// tslint:enable:max-line-length\nconst useLDClient = () => {\n  const { ldClient } = useContext(context);\n\n  return ldClient;\n};\n\nexport default useLDClient;\n","import { useContext } from 'react';\nimport context from './context';\n\n/**\n * Provides the LaunchDarkly client initialization error, if there was one.\n *\n * @return The `launchdarkly-js-client-sdk` `LDClient` initialization error\n */\nexport default function useLDClientError() {\n  const { error } = useContext(context);\n\n  return error;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}